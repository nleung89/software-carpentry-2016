12
setwd("~/Desktop/software-carpentry-2016/data-files/r-lesson/data/")
list.files()
read.csv(file = "inflammation-01.csv", header = FALSE)
weight_kg <- 55
weight_kg
2.2 * weight_kg
weight_kg <- 57.5
weight_kg
weight_lb <- 2.2 * weight_kg
weight_lb
dat <- read.csv(file = "data/inflammation-01.csv", header = FALSE)
head(dat)
dat <- read.csv(file = "inflammation-01.csv", header = FALSE)
head(dat)
class(dat)
dim(dat)
dat[1,1]
dat[30,20]
dat[1:4, 1:10]
dat[5:10, 1:10]
dat[c(3,8,37,56), c(10,14,29)]
dat[5,]
dat[,16]
raptor_1 <- dat[1,]
max(raptor_1)
max(dat[2,])
min(raptor_1)
mean(raptor_1)
mean(dat[,7])
median(dat[,7])
raptor_1
sd(dat[,7])
?apply
avg_raptor_inflammation <- apply(dat,1,mean)
avg_raptor_inflammation
avg_day_inflammation <- apply(dat,2,mean)
avg_day_inflammation
rowMeans(dat)
colMeans(dat)
animal <- c("m", "o", "n", "k", "e", "y")
animal[1:3]
animal[4:6]
animal[1:4]
animal[4:1]
animal[-1]
animal[-4]
animal[-1:-4]
animal[5,2,3]
animal[-4:-5]
animal[-1:-4]
animal[-1:-3:-5]
animal[-1:-5]
animal[5]+animal[2]+animal[3]
animal[5],animal[2],animal[3]
animal[5] animal[2] animal[3]
plot(avg_day_inflammation)
animal[c(5,2,3)]
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
plot(sd(avg_day_inflammation))
plot(sd(dat)
dat
dat
plot(sd_day_inflammation)
sd_day_inflammation <- apply(dat, 2, sd)
plot(sd_day_inflammation)
fahr_to_kelvin(32)
}
fahr_to_kelvin(32)
temp <- 32
fahr_to_kelvin(32)
fahr_to_kelvin(temp)
}
fahr_to_kelvin <- function(temp) {
kelvin <- ((temp - 32) * (5 / 9)) + 273.15
return(kelvin)
fahr_to_kelvin <- function(temp) {
kelvin <- ((temp - 32) * (5 / 9)) + 273.15
return(kelvin)
}
fahr_to_kelvin(32)
fahr_to_kelvin(32)
fahr_to_kelvin <- function(temp) {
kelvin <- ((temp - 32) * (5 / 9)) + 273.15
return(kelvin)
}
fahr_to_kelvin(32)
fahr_to_kelvin <-function(temp){
kelvin <-((temp-32)*(5/9)) + 273.15
return(kelvin)
}
fahr_to_kelvin(32)
fahr_to_kelvin <-function(temp){
kelvin <-((temp-32)*(5/9)) + 273.15
return(kelvin)
}
fahr_to_kelvin(32)
fahr_to_kelvin <-function(temp){
kelvin <-((temp-32)*(5/9)) + 273.15
return(kelvin)
}
fahr_to_kelvin(32)
fahr_to_kelvin(100)
q
kelvin_to_celsius <- function(temp) {
celsius <- temp - 273.15
return(celsius)
}
kelvin_to_celsius(0)
fahr_to_celsius <- function(temp) {
temp_k <- fahr_to_kelvin(temp)
result <- kelvin_to_celsius(temp_k)
return(result)
}
fahr_to_celsius(32.0)
original <- c("a","b","c","d","e")
wrapper <- "zzz"
fence(original,wrapper)
fence <- function(original,wrapper)
fence <- function(c(wrapper),c(original),c(wrapper)
fence <- function(c(wrapper),c(original),c(wrapper))
fence <- function(original,wrapper)
result <- c(wrapper),c(original),c(wrapper)
return(result)
original <- c("a","b","c","d","e")
wrapper <- "zzz"
fence <- function(original)
result <- [c(wrapper),c(original),c(wrapper)]
return(result)
fence <- function(original) {
result <- [c(wrapper),c(original),c(wrapper)]
return(result)
}
original <- c("a","b","c","d","e")
wrapper <- "zzz"
fence <- function(original,wrapper) {
return(c(wrapper,original,wrapper))
}
fence(original,wrapper)
list.files()
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(file = filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
analyze("data/inflammation-01.csv")
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(file = filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
analyze("inflammation-01.csv")
analyze("inflammation-02.csv")
best_practice <- c("Let", "the", "computer", "do", "the", "work")
print_words <- function(sentence) {
print(sentence[1])
print(sentence[2])
print(sentence[3])
print(sentence[4])
print(sentence[5])
print(sentence[6])
}
print_words(best_practice)
print_words(best_practice[-6])
print_words <- function(sentence) {
for (word in sentence) {
print(word)
}
}
print_words(best_practice)
print_words(best_practice[-6])
word
print_words(best_practice)
word
print(word)
print_words <- function(sentence) {
for (word in sentence) {
# word <- sentence[1]
# word <- sentence[2]
print(word)
}
}
print(word)
word
print_words <- function(sentence) {
for (word in sentence) {
# word <- sentence[1]
# word <- sentence[2]
print(word)
}
}
print_words(best_practice)
print(word)
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
}
# Number of vowels
len
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
print(len
}
# Number of vowels
len
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
len <- len + 1
print(len)
}
# Number of vowels
len
v
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for (v in vowels) {
print(len)
len <- len + 1
}
# Number of vowels
len
seq(3)
print_N(3)
print_N <- "z"
for (print_N in seq(3)) {
print(print_N)
}
print_N(3)
print_N
seq(3)
print_N <- function(nat_num) {
for (x in seq(nat_num))
print(x)
}
print_N(3)
print_N(7)
ex_vec <- c(4, 8, 15, 16, 23, 42)
total <- function(num) {
tot = 0
for(x in num) {
tot = tot + 1
}
return(tot)
}
total(ex_vec)
ex_vec <- c(4, 8, 15, 16, 23, 42)
total <- function(num) {
tot = 0
for(x in num) {
tot = tot + 1
}
return(tot)
}
ex_vec <- c(4, 8, 15, 16, 23, 42)
total <- function(num) {
tot = 0
for(x in num) {
tot = tot + x
}
return(tot)
}
total(ex_vec)
tot
x
num
ex_vec
ex_vec <- c(4, 8, 15, 16, 23, 42)
total <- function(num) {
tot = 0
for(x in num) {
tot = tot + x
}
return(tot)
}
total(ex_vec)
tot
2^4
expo <- function(base, exponent) {
tot = 1
# Accounts for exponent = 0. Don't worry about this for now
if(exponent == 0){
return(tot)
}
for(i in 1:exponent){
tot = tot * base
}
return(tot)
}
expo(3, 0)
expo(3, 2)
Sys.glob("*csv")
Sys.glob("inflammation***.csv")
list.files(pattern="inflammation")
filenames <- Sys.glob("i*.csv")
Sys.glob("i*.csv")
for (file in filenames) {
print(file)
analyze(file)
}
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(file = filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
analyze_all <- function(pattern) {
# Runs the function analyze for each file in the current working directory
# that contains the given pattern.
filenames <- list.files(path = "data", pattern = pattern, full.names = TRUE)
for (f in filenames) {
analyze(f)
}
}
analyze("inflammation-01.csv")
pdf("inflammation-01.pdf")
analyze("inflammation-01.csv")
dev.off()
pdf("inflammation-01.pdf")
analyze("inflammation-01.csv")
dev.off()
num <- 37
if (num > 100) {
print("greater")
} else {
print("not greater")
}
print("done")
num <- 200
if (num > 100) {
print("greater")
} else {
print("not greater")
}
print("done")
num > 100
num < 100
num <- 53
if (num > 100) {
print("num is greater than 100")
}
num <- 102
if (num > 100) {
print("num is greater than 100")
}
sign <- function(num) {
if (num > 0) {
return(1)
} else if (num == 0) {
return(0)
} else {
return(-1)
}
}
sign(-3)
sign(0)
sign(2/3)
if (1 > 0 & -1 > 0) {
print("both parts are true")
} else {
print("at least one part is not true")
}
if (1 > 0 | -1 > 0) {
print("at least one part is true")
} else {
print("neither part is true")
}
